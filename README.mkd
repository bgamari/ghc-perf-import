# Tools for working with ghc-speed history

`perf-import` takes validate logs, picks out the juicy performance number from
them, and plops them into the database.

`perf-import-git` traverses the database for commits lacking metadata (e.g.
commit message and date), looks them up in the given repository, and plops the
resulting metadata to the database.

```
$ git clone git@github.com:bgamari/ghc-perf-import
$ cd ghc-perf-import
$ git clone git@github.com:nomeata/ghc-speed-logs
$ git clone git@github.com:ghc/ghc
$ cabal install
$ psql postgres < schema.sql
$ perf-import -e nomeata ghc-perf-import/*.log
$ perf-import-git
$ echo 'SELECT count(1) FROM commits;' | psql ghc_perf postgres
$ cat <<EOF | psql ghc_perf postgres
COPY (
    SELECT commits.commit_sha, commits.commit_date, results.result_value
    FROM results, commits
    WHERE results.commit_id = commits.commit_id AND
        results.test_id = 36
    ORDER BY (commits.commit_date)
) TO STDOUT CSV;
EOF
```

Export all results for a given test,
```
\copy (
    SELECT *
    FROM results_view
    WHERE test_env = 'nomeata'
      AND branch_name = 'master'
      AND test_name='compile-allocs/AbsConc3'
    ORDER BY commit_date
) TO 'hi' CSV;
```

Find commits which strongly affect compiler allocations,
```
WITH deltas(commit_sha, commit_date, commit_title, test_name, delta) AS (
    SELECT x.commit_sha,
           x.commit_date,
           x.commit_title,
           x.test_name,
           (x.result_value - x.prev_value) / NULLIF(x.prev_value, 0) AS delta
    FROM (
        SELECT commit_sha,
               commit_date,
               commit_title,
               test_name,
               result_value,
               lag(result_value) OVER (PARTITION BY test_name
                                       ORDER BY commit_date) AS prev_value
        FROM results_view
        WHERE branch_name = 'master'
          AND test_env = 'nomeata'
        ORDER BY commit_date
    ) AS x
)
SELECT *
FROM deltas
WHERE abs(delta) > 0.10
  AND test_name LIKE 'compile-allocs/%'
ORDER BY commit_sha, abs(delta) DESC;
```


To produce terribly-formatted plots,
```
$ i=0; while IFS= read -r tests; do echo $tests; ./plot.py -o $i.svg $tests; let i=i+1; done < tests.grouped
```




To compute a comparison between two commits,
```
SELECT new.test_env, new.test_name, array_agg(old.result_value), array_agg(new.result_value)
FROM (
select * from results_view where commit_sha='ba46dd060f959e3c96a74c1546946c3f8bf84dd0'
) AS old, (
    select * from results_view where commit_sha='ba46dd060f959e3c96a74c1546946c3f8bf84dd0'
) AS new
WHERE old.test_env = new.test_env AND old.test_name = new.test_name
GROUP BY (new.test_env, new.test_name)
```

To get a summary of the largest changes,
```
SELECT * FROM deltas WHERE abs(delta) > 0 ORDER BY rel_delta DESC;
```
